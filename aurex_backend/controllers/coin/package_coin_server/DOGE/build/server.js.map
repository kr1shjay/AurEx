{"version":3,"sources":["../server.js"],"names":["express","bodyParser","bitcoin_rpc","app","use","urlencoded","extended","json","host","port","username","password","coin","PORT","post","req","res","reqBody","body","console","log","init","call","userId","err","address","status","toString","result","get","reqQuery","query","skip","parseInt","data","list","toAddress","parseFloat","amount","toFixed","trxId","message","listen"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport bitcoin_rpc from 'node-bitcoin-rpc'\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\nconst host = '127.0.0.1';\nconst port = 8332;\nconst username = 'Lmksssdksdmksndjwh';\nconst password = \"Pvsdnvsdncudgdwqsdevwqsq\";\nconst coin = 'DOGE'\nconst PORT = 3000;\n\n/** \n * Create New Address\n * Method : POST\n * Body : userId\n*/\napp.post('/newAdress', (req, res) => {\n  try {\n    let reqBody = req.body;\n    console.log(\"------reqBody\", reqBody)\n    bitcoin_rpc.init(host, port, username, password)\n    bitcoin_rpc.call('getnewaddress', [reqBody.userId], function (err, address) {\n      if (err) {\n        return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n      }\n      let result = {\n        address: address.result\n      }\n      return res.status(200).json({ 'status': \"SUCCESS\", 'message': \"successfully\", result })\n    })\n  } catch (err) {\n    return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n  }\n})\n\napp.get('/walletBal', (req, res) => {\n  try {\n    bitcoin_rpc.init(host, port, username, password)\n    bitcoin_rpc.call('getbalance', [], function (err, address) {\n      if (err) {\n        return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n      }\n\n      return res.status(200).json({ 'status': \"SUCCESS\", 'message': \"successfully\", result: address })\n    })\n  } catch (err) {\n    return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n  }\n})\n\n/** \n * Transaction List\n * URL : /transactionList\n * METHOD : GET\n * QUERY : skip\n*/\napp.get('/transactionList', (req, res) => {\n  try {\n    let reqQuery = req.query;\n    let skip = 0;\n\n    if (reqQuery && reqQuery.skip > 0) {\n      skip = parseInt(reqQuery.skip)\n    }\n\n    console.log(\"----reqQuery\", reqQuery, skip)\n    bitcoin_rpc.init(host, port, username, password)\n    bitcoin_rpc.call('listtransactions', [\"*\", 100, skip], function (err, data) {\n      if (err) {\n        console.log(\"-----err\", err)\n        return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n      }\n      let result = {\n        list: data.result\n      }\n\n      console.log(\"------result\", result)\n\n      return res.status(200).json({ 'status': \"SUCCESS\", 'message': \"successfully\", result })\n    })\n  } catch (err) {\n    console.log(\"-----err-----\", err)\n    return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n  }\n})\n\n/** \n * Transaction List\n * URL : /transactionList\n * METHOD : POST\n * BODY : amount, toAddress\n*/\napp.get('/transfer', (req, res) => {\n  try {\n    let reqBody = req.body;\n\n    console.log(\"----reqBody\", reqBody)\n    bitcoin_rpc.init(host, port, username, password)\n    bitcoin_rpc.call('sendtoaddress', [reqBody.toAddress, parseFloat(reqBody.amount).toFixed(8)], function (err, address) {\n      if (err) {\n        return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n      }\n      console.log(\"----err---\", err)\n      console.log(\"----address\", address)\n      let result = {\n        trxId: address.result\n      }\n      return res.status(200).json({ 'status': \"SUCCESS\", 'message': \"successfully\", result })\n    })\n  } catch (err) {\n    console.log(\"----err---1\", err)\n    return res.status(400).json({ 'status': \"FAILED\", 'message': err.toString() })\n  }\n})\n\napp.get(\"/\", (req, res) => {\n  res.status(200).json({\n    message: \"I am using babel in NodeJS\",\n    status: \"success\",\n  });\n});\n\napp.listen(PORT, function () {\n  console.log(`Example app listening on port ${PORT}!`);\n});"],"file":"server.js"}